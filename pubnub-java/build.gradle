buildscript {
    dependencies {
//        classpath ("com.github.siom79.japicmp:japicmp:0.18.2") {
////            force = true
//        }
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id 'com.github.johnrengelman.shadow'
    id 'java-library'
    id 'java-test-fixtures'
    id "org.jlleitschuh.gradle.ktlint"
    id "jacoco"
    id 'checkstyle'
    id 'org.jetbrains.dokka'
    id "com.github.ben-manes.versions"
    id "com.vanniktech.maven.publish"
}

group = 'com.pubnub'

version = '6.3.6'

description = """"""
kotlin {
    jvmToolchain(8)
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

//
//configurations.all {
//}

lombok {
    version = "1.18.30"
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
//    allTest
    integrationTestImplementation.extendsFrom(testImplementation)
//    testImplementation { extendsFrom allTest }
}

dependencies {
    api(project(":pubnub-kotlin-core:core-api"))
    implementation(project(":pubnub-kotlin-core:core-impl"))
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.6.2'
    api group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '4.10.0'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'

    // gson
    api 'com.google.code.gson:gson:2.9.0'
    implementation group: 'com.squareup.retrofit2', name: 'converter-gson', version: '2.6.2'

    // cbor
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.14.2'

    implementation 'org.jetbrains:annotations:23.0.0'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.9'
    testImplementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.9'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.0.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.8.1'
    implementation group: 'org.json', name: 'json', version: '20230227'
    testImplementation group: 'io.cucumber', name: 'cucumber-java', version: '6.10.4'
    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '6.10.4'
    testImplementation group: 'io.cucumber', name: 'cucumber-picocontainer', version: '6.10.4'
    testImplementation group: 'org.aeonbits.owner', name: 'owner', version: '1.0.8'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.2'

    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.0.1'

//    integrationTestImplementation group: 'junit', name: 'junit', version: '4.13.2'
    integrationTestImplementation group: 'org.aeonbits.owner', name: 'owner', version: '1.0.8'
//    integrationTestImplementation(project(":pubnub-kotlin-core"))
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = "8.14"
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    sourceSets = [sourceSets.main]
}

tasks.withType(Checkstyle) {
    exclude '**/vendor/**', '**/*Test*'

    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
}

task delombokHelp(type: DelombokTask) {
    args "--help"
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    destinationDir = file("docs")

    options.noTimestamp = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = 'sources'
    from "$buildDir/delombok"
}

test {
    useJUnitPlatform()
    exclude '**/contract/*.class'
}


//build.dependsOn compileIntegrationTestJava

def notApplicableAnymore = [
        "com.pubnub.api.builder.dto.SubscribeOperation",
        "com.pubnub.api.crypto.cryptor.AesCbcCryptor",
        "com.pubnub.api.crypto.cryptor.AesCbcCryptorKt",
        "com.pubnub.api.endpoints.remoteaction.RemoteActionFactory",
        "com.pubnub.api.managers.*",
        "com.pubnub.api.workers.SubscribeMessageProcessor",
        "com.pubnub.api.workers.SubscribeMessageWorker",
        "com.pubnub.api.services.*",
        "com.pubnub.api.endpoints.objects_api.utils.Include*",
        "com.pubnub.api.endpoints.objects_api.utils.Filter*",
        "com.pubnub.api.endpoints.objects_api.utils.Limiter*",
        "com.pubnub.api.endpoints.objects_api.utils.HavingCompositeParameterEnricher",
        "com.pubnub.api.endpoints.objects_api.utils.Pager*",
        "com.pubnub.api.endpoints.objects_api.utils.Sorter*",
        "com.pubnub.api.endpoints.objects_api.utils.TotalCounter*",


]

def differencesNotImportant = [
        "com.pubnub.api.builder.PubSubBuilder", // constructor
        "com.pubnub.api.builder.PresenceBuilder", // constructor
        "com.pubnub.api.builder.SubscribeBuilder", // constructor
        "com.pubnub.api.builder.UnsubscribeBuilder", // constructor
        "com.pubnub.api.crypto.CryptoModule", // constructor, internal methods
        "com.pubnub.api.crypto.CryptoModule", // constructor, internal methods
        "com.pubnub.api.crypto.cryptor.InputStreamSeparator", // internal class
        "com.pubnub.api.endpoints.DeleteMessages", // constructor
        "com.pubnub.api.models.consumer.files.PNDownloadFileResult", // final
        "com.pubnub.api.models.consumer.files.PNDeleteFileResult", // final
]

def shouldHaveBeenInternal = [
    "com.pubnub.api.crypto.cryptor.HeaderParser",
    "com.pubnub.api.crypto.cryptor.HeaderParserKt",
    "com.pubnub.api.crypto.cryptor.CryptorHeader",
    "com.pubnub.api.crypto.cryptor.CryptorHeaderVersion",
    "com.pubnub.api.crypto.cryptor.CryptorHeaderVersion\$Companion",
    "com.pubnub.api.crypto.cryptor.LegacyCryptor",
    "com.pubnub.api.crypto.cryptor.LegacyCryptorKt",
    "com.pubnub.api.crypto.cryptor.ParseResult",
    "com.pubnub.internal.*",
]

def checkedForNow = [

]

tasks.register("japicmp", me.champeau.gradle.japicmp.JapicmpTask) {
    oldClasspath.from(files('/Users/wojciech.kalicinski/projects/pubnub-java/build/libs/pubnub-gson-6.4.4.jar'))
    newClasspath.from(tasks.named('jar'), "../pubnub-kotlin-core/build/libs/pubnub-kotlin-core-7.7.4.jar")
    onlyModified = false
    failOnModification = false
    htmlOutputFile = layout.buildDirectory.file("reports/japi.html")
    ignoreMissingClasses = true
    classExcludes = notApplicableAnymore + differencesNotImportant + checkedForNow + shouldHaveBeenInternal
    methodExcludes = [
            "*#component1()",
            "*#component2()",
            "*#component3()",
            "*#component4()",
            "*#component5()",
            "*#component6()",
            "*#component7()",
            "*#copy(*)",
            "*#copy(*,*)",
            "*#copy(*,*,*)",
            "*#copy(*,*,*,*)",
            "*#copy(*,*,*,*,*)",
            "*#copy(*,*,*,*,*,*)",
            "*#copy(*,*,*,*,*,*,*)",
    ]
    compatibilityChangeExcludes = ["METHOD_NOW_FINAL", "CONSTRUCTOR_REMOVED"]
}

tasks.register("mergeKotlinJars", org.gradle.jvm.tasks.Jar) {
    dependsOn(jar)
    from(zipTree("/Users/wojciech.kalicinski/projects/pubnub-kotlin-copy/pubnub-java/build/libs/pubnub-java-6.3.6.jar"), zipTree("/Users/wojciech.kalicinski/projects/pubnub-kotlin-copy/pubnub-kotlin-core/core-api/build/libs/core-api-8.0.0.jar"))
    setArchiveFileName("combined.jar")
}