plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.7.20'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id "com.vanniktech.maven.publish" version '0.22.0'
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
}
group = 'com.pubnub'

version = '6.3.4'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8


configurations.all {
}

lombok {
    version = "1.18.4"
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

configurations {
    allTest
    integrationTestImplementation { extendsFrom allTest }
    testImplementation { extendsFrom allTest }
}

dependencies {
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.6.2'
    api group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '4.10.0'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.28'

    // gson
    api 'com.google.code.gson:gson:2.9.0'
    implementation group: 'com.squareup.retrofit2', name: 'converter-gson', version: '2.6.2'

    // cbor
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.14.2'

    implementation 'org.jetbrains:annotations:23.0.0'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.9'
    testImplementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.9'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.0.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.8.1'
    integrationTestImplementation group: 'org.aeonbits.owner', name: 'owner', version: '1.0.8'
    implementation group: 'org.json', name: 'json', version: '20230227'
    testImplementation group: 'io.cucumber', name: 'cucumber-java', version: '6.10.4'
    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '6.10.4'
    testImplementation group: 'io.cucumber', name: 'cucumber-picocontainer', version: '6.10.4'
    testImplementation group: 'org.aeonbits.owner', name: 'owner', version: '1.0.8'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.2'
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = "8.14"
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    sourceSets = [sourceSets.main]
}

tasks.withType(Checkstyle) {
    exclude '**/vendor/**', '**/*Test*'

    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
}

task delombokHelp(type: DelombokTask) {
    args "--help"
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    destinationDir = file("docs")

    options.noTimestamp = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "$buildDir/delombok"
}

task cucumber(type: Test) {
    systemProperty "cucumber.filter.tags", System.getProperty("cucumber.filter.tags")
    systemProperty "cucumber.features", System.getProperty("cucumber.features")
    systemProperty "cucumber.plugins", System.getProperty("cucumber.plugins")
}

test {
    useJUnitPlatform()
    exclude '**/contract/*.class'
}


build.finalizedBy(shadowJar)
build.dependsOn compileIntegrationTestJava
