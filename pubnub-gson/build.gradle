import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.dokka.gradle.DokkaTaskPartial

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java-library'
    id("io.freefair.lombok") version "8.6"
    id 'com.github.johnrengelman.shadow'
    id "org.jlleitschuh.gradle.ktlint"
    id "jacoco"
    id 'checkstyle'
    id 'org.jetbrains.dokka'
    id "com.github.ben-manes.versions"
    id "com.vanniktech.maven.publish"
}

group = GROUP
version = VERSION_NAME
description = """"""

kotlin {
    jvmToolchain(8)
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
//    allTest
    integrationTestImplementation.extendsFrom(testImplementation)
//    testImplementation { extendsFrom allTest }
}

dependencies {
    api(project(":pubnub-core:pubnub-core-api"))
    implementation(project(":pubnub-core:pubnub-core-impl"))

    implementation(libs.slf4j)
    implementation libs.jetbrains.annotations

    testImplementation libs.logback.classic
    testImplementation libs.logback.core
    testImplementation libs.hamcrest
    testImplementation libs.junit4
    testImplementation libs.wiremock
    testImplementation libs.awaitility
    testImplementation libs.mockito
    testImplementation libs.owner
    testImplementation libs.junit.jupiter
    testImplementation libs.junit.vintage.engine
    testImplementation libs.awaitility

    integrationTestImplementation libs.owner
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    toolVersion = "8.14"
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    sourceSets = [sourceSets.main]
}

tasks.withType(Checkstyle) {
    exclude '**/vendor/**', '**/*Test*'

    reports {
        xml.required = true
        html.required = true
    }
}

tasks.withType(DokkaTask.class).configureEach {
    dokkaSourceSets.configureEach {
        perPackageOption {
            matchingRegex.set(".*internal.*")
            suppress.set(true)
        }
        skipEmptyPackages.set(true)
    }
}

tasks.withType(DokkaTaskPartial.class).configureEach {
    dokkaSourceSets.configureEach {
        perPackageOption {
            matchingRegex.set(".*internal.*")
            suppress.set(true)
        }
        skipEmptyPackages.set(true)
    }
}

check.dependsOn jacocoTestReport
//task delombok(type: DelombokTask, dependsOn: compileJava) {
//    ext.outputDir = file("$buildDir/delombok")
//    outputs.dir(outputDir)
//    sourceSets.main.java.srcDirs.each {
//        inputs.dir(it)
//        args(it, "-d", outputDir)
//    }
//}


javadoc {
    destinationDir = file("docs")
    options.noTimestamp = true
}

//task sourcesJar(type: Jar, dependsOn: classes) {
////    classifier = 'sources'
//    from "$buildDir/delombok"
//}

test {
    useJUnitPlatform()
    exclude '**/contract/*.class'
}

tasks.register("mergeKotlinJars", org.gradle.jvm.tasks.Jar) {
    from(zipTree("/Users/wojciech.kalicinski/projects/pubnub-kotlin-copy/pubnub-gson/build/libs/pubnub-gson-9.0.0.jar"), zipTree("/Users/wojciech.kalicinski/projects/pubnub-kotlin-copy/pubnub-core/pubnub-core-api/build/libs/pubnub-core-api-9.0.0.jar"))
    setArchiveFileName("combined.jar")
}